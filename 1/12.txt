 配置 Git
在首次使用 Git 之前，需要配置用户信息：
bash
复制
git config --global user.name "Your Name"
git config --global user.email "your_email@example.com"
这些信息将用于提交日志。
3. 创建本地仓库
初始化新仓库：
bash
复制
mkdir my_project
cd my_project
git init
这将在当前目录下创建一个名为 .git 的隐藏目录，作为本地仓库。
克隆远程仓库：
bash
复制
git clone https://github.com/username/repository.git
将远程仓库克隆到本地。克隆完成后，进入仓库目录：
bash
复制
cd repository
4. 基本操作
查看状态：
bash
复制
git status
查看当前工作区的状态，包括哪些文件被修改、哪些文件已暂存等。
添加文件到暂存区：
bash
复制
git add filename
或者将所有文件添加到暂存区：
bash
复制
git add .
提交更改到本地仓库：
bash
复制
git commit -m "描述信息"
提交暂存区的更改到本地仓库，并添加描述信息。
查看提交历史：
bash
复制
git log
查看提交历史记录。
5. 远程仓库操作
关联远程仓库：
bash
复制
git remote add origin https://github.com/username/repository.git
将本地仓库与远程仓库关联。
推送代码到远程仓库：
bash
复制
git push -u origin master
将本地分支的更改推送到远程仓库的 master 分支。如果分支名称不是 master，请替换为实际分支名称。
从远程仓库拉取代码：
bash
复制
git pull origin master
从远程仓库拉取最新的更改并合并到本地分支。
6. 分支操作
查看分支：
bash
复制
git branch
查看当前本地的所有分支。
创建新分支：
bash
复制
git branch new-branch
或者直接切换到新分支：
bash
复制
git checkout -b new-branch
切换分支：
bash
复制
git checkout new-branch
合并分支：
bash
复制
git merge new-branch
将 new-branch 分支的更改合并到当前分支。
7. 冲突解决
如果在合并分支时出现冲突，Git 会提示你手动解决冲突。解决冲突后，需要执行以下命令：
bash
复制
git add .
git commit -m "解决冲突后的提交"
8. 其他常用命令
查看远程仓库信息：
bash
复制
git remote -v
删除远程仓库关联：
bash
复制
git remote remove origin
更新远程仓库信息：
bash
复制
git remote set-url origin https://github.com/username/repository.git
查看当前分支：
bash
复制
git branch
删除本地分支：
bash
复制
git branch -d branch-name
删除远程分支：
bash
复制
git push origin --delete branch-name
通过以上步骤和命令，你可以完成 Git 的基本操作，包括初始化仓库、提交更改、管理分支以及与远程仓库交互。希望这份教程对你有所帮助！
复制
分享
$ git push -u origin master
fatal: unable to access 'https://github.com/Andrew8314/RT-THREAD.git/   ': Failed to connect to 127.0.0.1 port 10809 after 2062 ms: Could not connect to server
编辑
复制
从你提供的错误信息来看，Git 在尝试推送代码到远程仓库时遇到了网络连接问题。错误信息表明 Git 无法连接到 127.0.0.1 的端口 10809，这通常是因为网络配置或代理设置导致的问题。
错误分析
网络连接问题：
Git 尝试通过 127.0.0.1（本地主机）的端口 10809 连接到远程仓库，但连接失败。
这可能是由于本地网络配置错误或代理设置导致的。
链接合法性：
远程仓库的 URL 是 https://github.com/Andrew8314/RT-THREAD.git，看起来是合法的。
但是，Git 在尝试连接时被重定向到了 127.0.0.1，这表明可能存在代理或网络配置问题。
解决步骤
1. 检查网络连接
确保你的网络连接正常。你可以尝试访问其他网站或服务来确认网络是否正常。
2. 检查代理设置
如果你使用了代理服务器，可能是代理设置导致了问题。你可以尝试以下方法：
禁用代理：
如果你不需要代理，可以禁用它。运行以下命令：
bash
复制
git config --global --unset http.proxy
git config --global --unset https.proxy
检查代理配置：
如果你需要使用代理，确保代理配置正确。运行以下命令查看当前的代理配置：
bash
复制
git config --global --get http.proxy
git config --global --get https.proxy
如果代理配置不正确，可以重新设置代理：
bash
复制
git config --global http.proxy http://<username>:<password>@<proxy-server-url>:<port>
git config --global https.proxy https://<username>:<password>@<proxy-server-url>:<port>
3. 检查防火墙或安全软件
确保你的防火墙或安全软件没有阻止 Git 的网络连接。你可以尝试暂时禁用防火墙或安全软件，然后再次尝试推送代码。
4. 尝试使用 SSH
如果你当前使用的是 HTTPS URL，可以尝试切换到 SSH URL。SSH 通常更稳定，且不需要输入用户名和密码。
生成 SSH 密钥：
bash
复制
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
将生成的公钥（~/.ssh/id_rsa.pub）添加到 GitHub 的 SSH 密钥设置中。
更新远程仓库 URL：
bash
复制
git remote set-url origin git@github.com:Andrew8314/RT-THREAD.git
5. 重试推送
在完成上述步骤后，尝试再次推送代码：
bash
复制
git push -u origin master
